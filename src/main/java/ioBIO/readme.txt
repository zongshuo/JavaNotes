BIO：同步阻塞IO（面向流的传统java.io包的输入输出流，java.net包的Socket、ServerSocket），进程发起io系统调用后，进程被阻塞，转到内核空间处理，
    整个io处理完毕后返返回进程。操作成功则进程获取到数据。
    BIO主要用于文件系统文件的操作。
    特点：进程阻塞挂起不消耗CPU资源，及时响应每个操作；
          实现难度低、开发应用较容易；
          使用并发量小的网络应用开发；
          不适用并发量大的应用：因为一个请求io会阻塞进程，所以需要为每个请求分配一个处理线程以及时响应，系统开销大。

流：是一种有序的数据集合，有数据源和目的地。数据源可以是文件、内存、或是网络连接
    是对数据传输的总称或抽象，即数据在设备间的传输称为流。
    本质是数据传输，根据数据传输的特性将流抽象为各种类，方便更直观的进行数据操作。
流的分类：
    按方向（站在内存的角度）：输入流、输出流
    按功能：节点流（低级流）--用于直接操作目标设备、过滤流（高级流）--对一个已存在的流的连接和封装，通过对数据的处理为程序提供功能强大灵活的读写功能。
    操作单元：字节流--可以处理任何类型的数据、字符流--只能处理字符类型的数据。字节流和字符流可以转换。
转换流：字节流与字符流的转换
缓冲流：多次io与一次io的对比，效率提升
序列化流：是POJO的序列化与反序列化
打印流：系统信息的输出，方向可设置

同步与异步：同步是一种可靠的有序运行机制，当我们进行同步操作时，后续的任务是等待当前调用返回，才会进行下一步。
            异步则相反，其他任务不需要等待当前调用返回，通常依靠事件、回调等机制来实现任务间的次序关系。

            同步和异步针对的是实际的io操作。
            同步是用户线程发起io请求后仍需要等待或者轮询内核io操作完成后才能继续执行。
            异步是用户线程发起io请求后仍需要继续执行，当内核io操作完成后悔通知用户线程，或者调用用户注册的回调函数。

阻塞与非阻塞：在进行阻塞操作时，当前线程会处于阻塞状态，无法从事其他任务，只有当前条件就绪才能继续，比如ServerSocket新连接建立完毕，或者数据读取、写入操作完成。
              而非阻塞则是不管io操作是否结束，直接返回，相应操作在后台继续处理。

              阻塞和非阻塞针对的是发起io请求。
              阻塞指io操作需要彻底完成后才能返回用户空间。
              非阻塞指io操作被调用后立即返回一个状态值，无需等io操作彻底完成。
pipe（管道）：是两个线程间的单向数据连接

Reader-->各种Reader-->BufferedReader
Writer-->各种Writer-->BufferedWriter
InputStream-->各种Stream-->BufferedInputStream
OutputStream-->各种Stream-->BufferedOutputStream
Reader-->InputStreamReader-->FileReader

应用程序-->操作系统-->CPU-->DMA-->io接口
操作系统-->磁盘-->DMA-->内核读缓冲区（系统内存）-->CPU-->应用程序内存区域-->CPU-->系统内存区域-->DMA-->另外的内存地址


Console：控制台输入输出类
ObjectStreamClass：类的序列化描述符
ObjectStreamField：该类是描述串行化类中的串行化字段的类，一般会用一个ObjectStreamField数组来来声明一个类中的串行化字段。
ObjectInputStream.GetField：
ObjectInputStream.PutField：
SerializablePermission：
StreamTokenizer：
//TODO 都是干啥用的？